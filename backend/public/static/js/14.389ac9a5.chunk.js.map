{"version":3,"sources":["components/audio-spectrum/audio-spectrum.jsx","components/filter/index.js","components/filter/filter.jsx","components/current-track/index.js","components/current-track/current-track.jsx","pages/beats-page/beats-page.jsx","pages/beats-page/index.js"],"names":["makeStyles","theme","flexContainer","display","flexWrap","justifyContent","paddingTop","Filter","useState","open","setOpen","dispatch","useDispatch","useSelector","state","beatsReducer","info","isLoadingInfo","bpm","moods","genres","tags","formState","setFormState","useEffect","fetchInfo","stateKeys","useMemo","key","text","bpms","map","b","value","index","onChangeHandler","e","data","newState","tabIndex","isChanged","i","length","filter","Math","floor","window","innerHeight","className","Row","lg","md","sm","Col","xl","Dropdown","onOpen","onClose","wrapSelection","icon","faAngleUp","faAngleDown","placeholder","fluid","selection","options","onChange","CurrentTrack","track","setTrack","error","setError","audioReducer","id","isPlaying","loading","setLoading","show","setShow","history","useHistory","urlId","useParams","push","beatstoreService","BeatstoreService","getBeatById","then","beat","catch","imageUrl","process","imgUrl","dateObj","Date","loadTime","month","getUTCMonth","day","getUTCDate","date","getUTCFullYear","src","alt","onClick","stopPropagation","audioStopped","audioLoaded","audioPlayed","faPause","faPlay","title","faShoppingCart","buttonClass","t","filterSearchSet","target","innerText","undefined","BeatsPage","isMain"],"mappings":"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","file":"static/js/14.389ac9a5.chunk.js","sourcesContent":["import React, {useContext, useEffect, useRef, useState} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {useSelector} from \"react-redux\";\r\n\r\nimport './audio-spectrum.scss';\r\nimport AudioInstanceContext from \"../audio-instance-context\";\r\nimport Spinner from \"../spinner\";\r\nimport axios from \"axios\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    flexContainer: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'center',\r\n        paddingTop: '25%'\r\n    }\r\n}));\r\n\r\n\r\nconst AudioSpectrum2 = (props) => {\r\n\r\n    const {state, updateValue} = useContext(AudioInstanceContext);\r\n    const {isPlaying} = useSelector(state => state.audioReducer);\r\n    const amplitudeValues = useRef(null);\r\n    const classes = useStyles();\r\n    const [audioData, setAudioData] = useState(null);\r\n    const [animId, setAnimId] = useState(null);\r\n    const frequencyBandArray = useRef([...Array(25).keys()]).current;\r\n\r\n    const {audioInstance, source} = state;\r\n\r\n    useEffect(() => {\r\n        if (isPlaying && audioData) {\r\n            handleStartButtonClick();\r\n        }\r\n        else {\r\n            console.log('here');\r\n            cancelAnimationFrame(animId);\r\n        }\r\n\r\n        return () => {\r\n            cancelAnimationFrame(animId);\r\n        }\r\n    }, [isPlaying, audioData]);\r\n\r\n    useEffect(() => {\r\n        if (audioInstance) {\r\n            initializeAudioAnalyser();\r\n        }\r\n    }, [audioInstance]);\r\n\r\n    const initializeAudioAnalyser = async () => {\r\n        const audioContext = new AudioContext();\r\n        let newSource;\r\n        if (!source) {\r\n            newSource = audioContext.createBufferSource();\r\n            updateValue.setSource(newSource);\r\n        }\r\n        else {\r\n            newSource = source;\r\n        }\r\n\r\n        // let fileReader = new FileReader();\r\n        // let arrayBuffer;\r\n        //\r\n        // fileReader.onloadend = () => {\r\n        //     arrayBuffer = fileReader.result;\r\n        // }\r\n\r\n        const response = await axios.get(audioInstance.src, {\r\n            responseType: 'blob'\r\n        });\r\n        const arrayBuffer = await new Blob([response.data], {type: 'audio/mp3'}).arrayBuffer();\r\n\r\n        const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\r\n\r\n        // fileReader.readAsArrayBuffer(audioInstance.src);\r\n        console.log(audioBuffer);\r\n        newSource.buffer = audioBuffer;\r\n        const analyser = audioContext.createAnalyser();\r\n\r\n        analyser.fftSize = 1024;\r\n\r\n        newSource.connect(analyser);\r\n        analyser.connect(audioContext.destination);\r\n        setAudioData(analyser);\r\n    }\r\n    const getFrequencyData = (styleAdjuster) => {\r\n\r\n        const bufferLength = audioData.frequencyBinCount;\r\n        const amplitudeArray = new Uint8Array(bufferLength);\r\n        audioData.getByteFrequencyData(amplitudeArray);\r\n        styleAdjuster(amplitudeArray);\r\n\r\n    }\r\n\r\n    const adjustFreqBandStyle = (newAmplitudeData) => {\r\n        console.log(newAmplitudeData);\r\n        amplitudeValues.current = newAmplitudeData;\r\n        let domElements = frequencyBandArray.map((num) =>\r\n            document.getElementById(num));\r\n\r\n        for (let i = 0; i < frequencyBandArray.length; i++) {\r\n            let num = frequencyBandArray[i]\r\n            domElements[num].style.backgroundColor = `rgb(0, 255, ${amplitudeValues.current[num]})`\r\n            domElements[num].style.height = `${amplitudeValues.current[num]}px`\r\n        }\r\n    }\r\n\r\n    const runSpectrum = () => {\r\n        getFrequencyData(adjustFreqBandStyle)\r\n        requestAnimationFrame(runSpectrum)\r\n    }\r\n\r\n    const handleStartButtonClick = () => {\r\n        const animId = requestAnimationFrame(runSpectrum);\r\n        setAnimId(animId);\r\n    }\r\n\r\n\r\n\r\n    if (!state.audioInstance) {\r\n        return <Spinner/>\r\n    }\r\n\r\n    return (\r\n        <div className={`${classes.flexContainer} animat`}>\r\n            {frequencyBandArray.map((num) =>\r\n                <Paper\r\n                    className={'frequencyBands'}\r\n                    elevation={4}\r\n                    id={num}\r\n                    key={num}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default AudioSpectrum2;","import Filter from \"./filter\";\r\n\r\nexport default Filter;","import React, {useEffect, useMemo, useState} from 'react';\r\nimport {Dropdown} from 'semantic-ui-react';\r\nimport {Col, Row} from 'react-bootstrap';\r\nimport {faAngleDown, faAngleUp} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {filter, fetchInfo} from \"../../redux/actions/actions\";\r\n\r\nimport './filter.scss';\r\nimport BigSearch from \"../big-search/big-search\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Spinner from \"../spinner\";\r\nimport SpinnerAudio from \"../spinner-audio\";\r\n\r\nexport default function Filter() {\r\n    const [open, setOpen] = useState(null);\r\n    const dispatch = useDispatch();\r\n    const {info, isLoadingInfo} = useSelector(state => state.beatsReducer);\r\n\r\n    const [formState, setFormState] = useState({\r\n        bpm: null,\r\n        moods: null,\r\n        genres: null,\r\n        tags: null\r\n    });\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchInfo());\r\n    }, [])\r\n\r\n    const stateKeys = useMemo(() => ['bpm', 'moods', 'genres', 'tags'], []);\r\n\r\n    const [bpms, moods, genres, tags] = useMemo(() => {\r\n        return [\r\n            [{key: 'all1', text: 'All BPM'}, ...info.bpms.map(b => {\r\n                return {\r\n                    key: b,\r\n                    value: b,\r\n                    text: b\r\n                }\r\n            })],\r\n            [{key: 'all2', text: 'All moods'}, ...info.moods.map((b, index) =>  {\r\n                return {\r\n                    key: b + index,\r\n                    value: b,\r\n                    text: b\r\n                }\r\n            })],\r\n            [{key: 'all3', text: 'All genres'}, ...info.genres.map((b, index) => {\r\n                return {\r\n                    key: b + index,\r\n                    value: b,\r\n                    text: b\r\n                }\r\n            })],\r\n            [{key: 'all4', text: 'All tags'}, ...info.tags.map((b, index) => {\r\n                return {\r\n                    key: b + index,\r\n                    value: b,\r\n                    text: b\r\n                }\r\n            })]\r\n        ]\r\n    }, [info]);\r\n\r\n    const onChangeHandler = (e, data) => {\r\n        const newState = {\r\n            ...formState,\r\n            [stateKeys[data.tabIndex]]: data.value ? data.value : null\r\n        }\r\n        let isChanged = false;\r\n        for (let i = 0; i < stateKeys.length; i++) {\r\n            if (formState[stateKeys[i]] !== newState[stateKeys[i]]) {\r\n                isChanged = true;\r\n                break;\r\n            }\r\n        }\r\n        if (isChanged) {\r\n            setFormState(state => {\r\n                return newState;\r\n            });\r\n            dispatch(filter(newState, Math.floor(window.innerHeight / 65)));\r\n            // console.log(newState);\r\n        }\r\n    }\r\n\r\n    if (isLoadingInfo) {\r\n        return <SpinnerAudio/>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <BigSearch/>\r\n            <div className={`filter`}>\r\n                <Row lg={12} md={12} sm={12} className={`filter-row`}>\r\n                    <Col xl={3} md={4} sm={4} className={`dropdown-col`}>\r\n                        <Dropdown\r\n                            tabIndex={0}\r\n                            onOpen={e => setOpen(1)}\r\n                            onClose={e => setOpen(null)}\r\n                            wrapSelection={true}\r\n                            icon={<FontAwesomeIcon className={`icon`} icon={open === 1 ? faAngleUp : faAngleDown}/>}\r\n                            className={`dropdown-itself`}\r\n                            placeholder='All BPM'\r\n                            fluid\r\n                            selection\r\n                            options={bpms}\r\n                            onChange={onChangeHandler}\r\n                        />\r\n                    </Col>\r\n                    <Col xl={3} md={4} sm={4} className={`dropdown-col`}>\r\n                        <Dropdown\r\n                            tabIndex={1}\r\n                            onOpen={e => setOpen(2)}\r\n                            onClose={e => setOpen(null)}\r\n                            icon={<FontAwesomeIcon className={`icon`} icon={open === 2 ? faAngleUp : faAngleDown}/>}\r\n                            className={`dropdown-itself`}\r\n                            placeholder='All moods'\r\n                            fluid\r\n                            selection\r\n                            options={moods}\r\n                            onChange={onChangeHandler}\r\n\r\n                        />\r\n                    </Col>\r\n                    <Col xl={3} md={4} sm={4} className={`dropdown-col`}>\r\n                        <Dropdown\r\n                            tabIndex={2}\r\n                            onOpen={e => setOpen(3)}\r\n                            onClose={e => setOpen(null)}\r\n                            icon={<FontAwesomeIcon className={`icon`} icon={open === 3 ? faAngleUp : faAngleDown}/>}\r\n                            className={`dropdown-itself`}\r\n                            placeholder='All genres'\r\n                            fluid\r\n                            selection\r\n                            options={genres}\r\n                            onChange={onChangeHandler}\r\n\r\n                        />\r\n                    </Col>\r\n                    <Col xl={3} md={12} sm={12} className={`dropdown-col`}>\r\n                        <Dropdown\r\n                            tabIndex={3}\r\n                            onOpen={e => setOpen(4)}\r\n                            onClose={e => setOpen(null)}\r\n                            icon={<FontAwesomeIcon className={`icon`} icon={open === 4 ? faAngleUp : faAngleDown}/>}\r\n                            className={`dropdown-itself`}\r\n                            placeholder='All tags'\r\n                            fluid\r\n                            selection\r\n                            options={tags}\r\n                            onChange={onChangeHandler}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n\r\n            </div>\r\n        </>\r\n\r\n    );\r\n}","import CurrentTrack from \"./current-track\";\r\n\r\nexport default CurrentTrack;","import React, {useEffect, useState} from 'react';\r\nimport BeatstoreService from \"../../services\";\r\nimport {faPause, faPlay, faShoppingCart} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport './current-track.scss';\r\nimport ErrorIndicator from \"../error-indicator\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport SpinnerAudio from \"../spinner-audio\";\r\nimport {audioLoaded, audioPlayed, audioStopped, filterSearchSet} from \"../../redux/actions\";\r\nimport LicenseTypeModal from \"../license-type-modal\";\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport {filter} from \"../../redux/actions/actions\";\r\nimport useTraceUpdate from \"../../hooks/trace-updates-hook\";\r\n\r\nconst CurrentTrack = () => {\r\n    const [track, setTrack] = useState(null);\r\n    const [error, setError] = useState(null);\r\n    const {id, isPlaying} = useSelector(state => state.audioReducer);\r\n    const [loading, setLoading] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const [show, setShow] = useState(false);\r\n    const history = useHistory();\r\n    const {id: urlId} = useParams();\r\n\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            history.push(`/beats/${id}`);\r\n        }\r\n\r\n        if (urlId) {\r\n            const beatstoreService = new BeatstoreService();\r\n            setLoading(true);\r\n            beatstoreService.getBeatById(urlId)\r\n                .then(({data}) => {\r\n                    setTrack(data.beat);\r\n                    setLoading(false);\r\n                })\r\n                .catch(e => {\r\n                    setLoading(false);\r\n                    setError(e);\r\n                });\r\n        }\r\n\r\n    }, [id, urlId]);\r\n\r\n    // useTraceUpdate({track, loading, dispatch, show, id, isPlaying, error});\r\n\r\n    if (!track) {\r\n        return null;\r\n    }\r\n\r\n    if (error) {\r\n        return <ErrorIndicator/>\r\n    }\r\n\r\n    // if (loading) {\r\n    //     return\r\n    // }\r\n\r\n    const handlePlay = (e) => {\r\n        e.stopPropagation();\r\n\r\n        if (track.id === id && isPlaying) {\r\n            dispatch(audioStopped());\r\n        } else if (track.id !== id) {\r\n            dispatch(audioLoaded(track.id));\r\n        } else if (track.id === id && !isPlaying) {\r\n            dispatch(audioPlayed());\r\n        }\r\n    }\r\n\r\n    const imageUrl = process.env.REACT_APP_BACKEND_ASSET_URL + track.imgUrl;\r\n\r\n    const dateObj = new Date(track.loadTime);\r\n    const month = dateObj.getUTCMonth() + 1; //months from 1-12\r\n    const day = dateObj.getUTCDate();\r\n    const year = dateObj.getUTCFullYear();\r\n\r\n    const date = year + \"/\" + month + \"/\" + day;\r\n\r\n\r\n    return (\r\n        <div className={`current-track-container`}>\r\n            {\r\n                !loading ? (\r\n                    <>\r\n                        <div className={`img-container-featured`}>\r\n                            <img src={imageUrl} alt=\"featured track image\"/>\r\n                        </div>\r\n                        <div className={`content`}>\r\n                            <div className={`content-img-container-featured`}>\r\n                                <img src={imageUrl} alt=\"featured track image\"/>\r\n                                <div className={`icon-play-container`}\r\n                                     onClick={handlePlay}\r\n                                >\r\n                                    <FontAwesomeIcon className={`icon-play`}\r\n                                                     icon={id === track.id && isPlaying ? faPause : faPlay}/>\r\n                                </div>\r\n                            </div>\r\n                            <div className={`info`}>\r\n                                <p className={`caption`}>CURRENTLY PLAYING TRACK</p>\r\n                                <p className={`caption`}>🕒 {date}</p>\r\n                                <p className={`author`}>✍ Cherries By</p>\r\n                                <p className={`title`}>{track.title}</p>\r\n                                <div className={`footer`}>\r\n                                    <button className=\"track__to-cart-button\" onClick={(e) => {\r\n                                        e.stopPropagation();\r\n                                        setShow(true);\r\n                                    }}>\r\n                                        <FontAwesomeIcon icon={faShoppingCart}/> ADD\r\n                                    </button>\r\n                                    <LicenseTypeModal key={track.id}\r\n                                                      track={track}\r\n                                                      buttonClass=\"cart_button\"\r\n                                                      show={show}\r\n                                                      setOpen={setShow}/>\r\n                                    <div className={`tags-container`}>\r\n                                        {track.tags.map((t, index) => {\r\n                                            if (index < 3) {\r\n                                                return (<p\r\n                                                    key={index + t + track.id}\r\n                                                    onClick={e => {\r\n                                                        e.stopPropagation();\r\n                                                        dispatch(filterSearchSet(e.target.innerText));\r\n                                                        dispatch(filter(undefined, Math.floor(window.innerHeight / 65)));\r\n                                                    }}\r\n                                                >#{t}</p>);\r\n                                            }\r\n                                        })}\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </>\r\n                ) : (<SpinnerAudio/>)\r\n            }\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CurrentTrack;","import React from 'react';\r\nimport TracksTable from \"../../components/tracks-table/tracks-table\";\r\nimport Footer from \"../../components/footer\";\r\nimport AudioSpectrum2 from \"../../components/audio-spectrum\";\r\nimport Filter from \"../../components/filter\";\r\nimport {useParams} from \"react-router\";\r\nimport CurrentTrack from \"../../components/current-track\";\r\n\r\nconst BeatsPage = () => {\r\n    return (\r\n        <>\r\n            <Filter/>\r\n            <CurrentTrack/>\r\n            <TracksTable isMain={false}/>\r\n        </>\r\n        // <AudioSpectrumContainer/>\r\n\r\n    );\r\n};\r\n\r\nexport default BeatsPage;","import BeatsPage from \"./beats-page\";\r\n\r\nexport default BeatsPage;"],"sourceRoot":""}